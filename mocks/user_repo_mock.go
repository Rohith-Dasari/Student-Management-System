// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"
	models "sms/models"

	gomock "github.com/golang/mock/gomock"
)

// MockUserRepositoryI is a mock of UserRepositoryI interface.
type MockUserRepositoryI struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepositoryIMockRecorder
}

// MockUserRepositoryIMockRecorder is the mock recorder for MockUserRepositoryI.
type MockUserRepositoryIMockRecorder struct {
	mock *MockUserRepositoryI
}

// NewMockUserRepositoryI creates a new mock instance.
func NewMockUserRepositoryI(ctrl *gomock.Controller) *MockUserRepositoryI {
	mock := &MockUserRepositoryI{ctrl: ctrl}
	mock.recorder = &MockUserRepositoryIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRepositoryI) EXPECT() *MockUserRepositoryIMockRecorder {
	return m.recorder
}

// AddUser mocks base method.
func (m *MockUserRepositoryI) AddUser(id, name, email, password string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddUser", id, name, email, password)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddUser indicates an expected call of AddUser.
func (mr *MockUserRepositoryIMockRecorder) AddUser(id, name, email, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddUser", reflect.TypeOf((*MockUserRepositoryI)(nil).AddUser), id, name, email, password)
}

// GetUserByEmailID mocks base method.
func (m *MockUserRepositoryI) GetUserByEmailID(email string) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByEmailID", email)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByEmailID indicates an expected call of GetUserByEmailID.
func (mr *MockUserRepositoryIMockRecorder) GetUserByEmailID(email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByEmailID", reflect.TypeOf((*MockUserRepositoryI)(nil).GetUserByEmailID), email)
}
