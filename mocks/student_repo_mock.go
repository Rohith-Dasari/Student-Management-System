// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"
	models "sms/models"

	gomock "github.com/golang/mock/gomock"
)

// MockStudentRepositoryI is a mock of StudentRepositoryI interface.
type MockStudentRepositoryI struct {
	ctrl     *gomock.Controller
	recorder *MockStudentRepositoryIMockRecorder
}

// MockStudentRepositoryIMockRecorder is the mock recorder for MockStudentRepositoryI.
type MockStudentRepositoryIMockRecorder struct {
	mock *MockStudentRepositoryI
}

// NewMockStudentRepositoryI creates a new mock instance.
func NewMockStudentRepositoryI(ctrl *gomock.Controller) *MockStudentRepositoryI {
	mock := &MockStudentRepositoryI{ctrl: ctrl}
	mock.recorder = &MockStudentRepositoryIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStudentRepositoryI) EXPECT() *MockStudentRepositoryIMockRecorder {
	return m.recorder
}

// AddStudent mocks base method.
func (m *MockStudentRepositoryI) AddStudent(uuid, rollNumber, name, classID string, semester int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddStudent", uuid, rollNumber, name, classID, semester)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddStudent indicates an expected call of AddStudent.
func (mr *MockStudentRepositoryIMockRecorder) AddStudent(uuid, rollNumber, name, classID, semester interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddStudent", reflect.TypeOf((*MockStudentRepositoryI)(nil).AddStudent), uuid, rollNumber, name, classID, semester)
}

// GetAllStudentsOfClass mocks base method.
func (m *MockStudentRepositoryI) GetAllStudentsOfClass(classID string, semester int) ([]models.Students, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllStudentsOfClass", classID, semester)
	ret0, _ := ret[0].([]models.Students)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllStudentsOfClass indicates an expected call of GetAllStudentsOfClass.
func (mr *MockStudentRepositoryIMockRecorder) GetAllStudentsOfClass(classID, semester interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllStudentsOfClass", reflect.TypeOf((*MockStudentRepositoryI)(nil).GetAllStudentsOfClass), classID, semester)
}

// GetStudentByID mocks base method.
func (m *MockStudentRepositoryI) GetStudentByID(studentID string) (*models.Students, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStudentByID", studentID)
	ret0, _ := ret[0].(*models.Students)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStudentByID indicates an expected call of GetStudentByID.
func (mr *MockStudentRepositoryIMockRecorder) GetStudentByID(studentID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStudentByID", reflect.TypeOf((*MockStudentRepositoryI)(nil).GetStudentByID), studentID)
}

// GetStudentByRollNumber mocks base method.
func (m *MockStudentRepositoryI) GetStudentByRollNumber(rollNumber string) (*models.Students, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStudentByRollNumber", rollNumber)
	ret0, _ := ret[0].(*models.Students)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStudentByRollNumber indicates an expected call of GetStudentByRollNumber.
func (mr *MockStudentRepositoryIMockRecorder) GetStudentByRollNumber(rollNumber interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStudentByRollNumber", reflect.TypeOf((*MockStudentRepositoryI)(nil).GetStudentByRollNumber), rollNumber)
}

// UpdateStudent mocks base method.
func (m *MockStudentRepositoryI) UpdateStudent(studentID, name, rollnumber, classID string, semester int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStudent", studentID, name, rollnumber, classID, semester)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateStudent indicates an expected call of UpdateStudent.
func (mr *MockStudentRepositoryIMockRecorder) UpdateStudent(studentID, name, rollnumber, classID, semester interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStudent", reflect.TypeOf((*MockStudentRepositoryI)(nil).UpdateStudent), studentID, name, rollnumber, classID, semester)
}
