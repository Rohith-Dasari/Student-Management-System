// Code generated by MockGen. DO NOT EDIT.
// Source: grade_service_interface.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"
	services "sms/services"

	gomock "github.com/golang/mock/gomock"
)

// MockGradeServiceI is a mock of GradeServiceI interface.
type MockGradeServiceI struct {
	ctrl     *gomock.Controller
	recorder *MockGradeServiceIMockRecorder
}

// MockGradeServiceIMockRecorder is the mock recorder for MockGradeServiceI.
type MockGradeServiceIMockRecorder struct {
	mock *MockGradeServiceI
}

// NewMockGradeServiceI creates a new mock instance.
func NewMockGradeServiceI(ctrl *gomock.Controller) *MockGradeServiceI {
	mock := &MockGradeServiceI{ctrl: ctrl}
	mock.recorder = &MockGradeServiceIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGradeServiceI) EXPECT() *MockGradeServiceIMockRecorder {
	return m.recorder
}

// AddGrades mocks base method.
func (m *MockGradeServiceI) AddGrades(studentID, subjectID string, Grade, semester int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddGrades", studentID, subjectID, Grade, semester)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddGrades indicates an expected call of AddGrades.
func (mr *MockGradeServiceIMockRecorder) AddGrades(studentID, subjectID, Grade, semester interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddGrades", reflect.TypeOf((*MockGradeServiceI)(nil).AddGrades), studentID, subjectID, Grade, semester)
}

// GetAverageOfClass mocks base method.
func (m *MockGradeServiceI) GetAverageOfClass(classID string, semester int) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAverageOfClass", classID, semester)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAverageOfClass indicates an expected call of GetAverageOfClass.
func (mr *MockGradeServiceIMockRecorder) GetAverageOfClass(classID, semester interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAverageOfClass", reflect.TypeOf((*MockGradeServiceI)(nil).GetAverageOfClass), classID, semester)
}

// GetTopThree mocks base method.
func (m *MockGradeServiceI) GetTopThree(classID string, semester int) ([]services.GradeReponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTopThree", classID, semester)
	ret0, _ := ret[0].([]services.GradeReponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTopThree indicates an expected call of GetTopThree.
func (mr *MockGradeServiceIMockRecorder) GetTopThree(classID, semester interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTopThree", reflect.TypeOf((*MockGradeServiceI)(nil).GetTopThree), classID, semester)
}

// UpdateGrade mocks base method.
func (m *MockGradeServiceI) UpdateGrade(studentID, subjectID string, newGrade int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateGrade", studentID, subjectID, newGrade)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateGrade indicates an expected call of UpdateGrade.
func (mr *MockGradeServiceIMockRecorder) UpdateGrade(studentID, subjectID, newGrade interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateGrade", reflect.TypeOf((*MockGradeServiceI)(nil).UpdateGrade), studentID, subjectID, newGrade)
}
