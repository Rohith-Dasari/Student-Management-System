// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go
//
// Generated by this command:
//
//	mockgen -destination=../../mocks/grade_repo_mock.go -package=mocks -source=interface.go
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"
	gradeRepository "sms/repository/gradesRepository"

	gomock "go.uber.org/mock/gomock"
)

// MockGradeRepositoryI is a mock of GradeRepositoryI interface.
type MockGradeRepositoryI struct {
	ctrl     *gomock.Controller
	recorder *MockGradeRepositoryIMockRecorder
	isgomock struct{}
}

// MockGradeRepositoryIMockRecorder is the mock recorder for MockGradeRepositoryI.
type MockGradeRepositoryIMockRecorder struct {
	mock *MockGradeRepositoryI
}

// NewMockGradeRepositoryI creates a new mock instance.
func NewMockGradeRepositoryI(ctrl *gomock.Controller) *MockGradeRepositoryI {
	mock := &MockGradeRepositoryI{ctrl: ctrl}
	mock.recorder = &MockGradeRepositoryIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGradeRepositoryI) EXPECT() *MockGradeRepositoryIMockRecorder {
	return m.recorder
}

// AddGrades mocks base method.
func (m *MockGradeRepositoryI) AddGrades(studentID, subjectID string, Grade, semester int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddGrades", studentID, subjectID, Grade, semester)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddGrades indicates an expected call of AddGrades.
func (mr *MockGradeRepositoryIMockRecorder) AddGrades(studentID, subjectID, Grade, semester any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddGrades", reflect.TypeOf((*MockGradeRepositoryI)(nil).AddGrades), studentID, subjectID, Grade, semester)
}

// GetAverageGrade mocks base method.
func (m *MockGradeRepositoryI) GetAverageGrade(studentID string, semester int) (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAverageGrade", studentID, semester)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAverageGrade indicates an expected call of GetAverageGrade.
func (mr *MockGradeRepositoryIMockRecorder) GetAverageGrade(studentID, semester any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAverageGrade", reflect.TypeOf((*MockGradeRepositoryI)(nil).GetAverageGrade), studentID, semester)
}

// GetClassAverage mocks base method.
func (m *MockGradeRepositoryI) GetClassAverage(classID string, semester int) (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClassAverage", classID, semester)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClassAverage indicates an expected call of GetClassAverage.
func (mr *MockGradeRepositoryIMockRecorder) GetClassAverage(classID, semester any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClassAverage", reflect.TypeOf((*MockGradeRepositoryI)(nil).GetClassAverage), classID, semester)
}

// GetSemesterGrades mocks base method.
func (m *MockGradeRepositoryI) GetSemesterGrades(studentID string, semester int) ([]int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSemesterGrades", studentID, semester)
	ret0, _ := ret[0].([]int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSemesterGrades indicates an expected call of GetSemesterGrades.
func (mr *MockGradeRepositoryIMockRecorder) GetSemesterGrades(studentID, semester any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSemesterGrades", reflect.TypeOf((*MockGradeRepositoryI)(nil).GetSemesterGrades), studentID, semester)
}

// GetToppers mocks base method.
func (m *MockGradeRepositoryI) GetToppers(classID string, semester, top int) ([]gradeRepository.StudentAverage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetToppers", classID, semester, top)
	ret0, _ := ret[0].([]gradeRepository.StudentAverage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetToppers indicates an expected call of GetToppers.
func (mr *MockGradeRepositoryIMockRecorder) GetToppers(classID, semester, top any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetToppers", reflect.TypeOf((*MockGradeRepositoryI)(nil).GetToppers), classID, semester, top)
}

// UpdateGrade mocks base method.
func (m *MockGradeRepositoryI) UpdateGrade(studentID, subjectID string, newGrade int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateGrade", studentID, subjectID, newGrade)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateGrade indicates an expected call of UpdateGrade.
func (mr *MockGradeRepositoryIMockRecorder) UpdateGrade(studentID, subjectID, newGrade any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateGrade", reflect.TypeOf((*MockGradeRepositoryI)(nil).UpdateGrade), studentID, subjectID, newGrade)
}
