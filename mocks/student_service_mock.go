// Code generated by MockGen. DO NOT EDIT.
// Source: student_service_interface.go
//
// Generated by this command:
//
//	mockgen -destination=../mocks/student_service_mock.go -package=mocks -source=student_service_interface.go
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"
	models "sms/models"

	gomock "go.uber.org/mock/gomock"
)

// MockStudentServiceI is a mock of StudentServiceI interface.
type MockStudentServiceI struct {
	ctrl     *gomock.Controller
	recorder *MockStudentServiceIMockRecorder
	isgomock struct{}
}

// MockStudentServiceIMockRecorder is the mock recorder for MockStudentServiceI.
type MockStudentServiceIMockRecorder struct {
	mock *MockStudentServiceI
}

// NewMockStudentServiceI creates a new mock instance.
func NewMockStudentServiceI(ctrl *gomock.Controller) *MockStudentServiceI {
	mock := &MockStudentServiceI{ctrl: ctrl}
	mock.recorder = &MockStudentServiceIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStudentServiceI) EXPECT() *MockStudentServiceIMockRecorder {
	return m.recorder
}

// CreateStudent mocks base method.
func (m *MockStudentServiceI) CreateStudent(rollNumber, name, classID string, semester int) (*models.Students, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateStudent", rollNumber, name, classID, semester)
	ret0, _ := ret[0].(*models.Students)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateStudent indicates an expected call of CreateStudent.
func (mr *MockStudentServiceIMockRecorder) CreateStudent(rollNumber, name, classID, semester any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateStudent", reflect.TypeOf((*MockStudentServiceI)(nil).CreateStudent), rollNumber, name, classID, semester)
}

// UpdateStudent mocks base method.
func (m *MockStudentServiceI) UpdateStudent(studentID, name, rollnumber, classID string, semester int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStudent", studentID, name, rollnumber, classID, semester)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateStudent indicates an expected call of UpdateStudent.
func (mr *MockStudentServiceIMockRecorder) UpdateStudent(studentID, name, rollnumber, classID, semester any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStudent", reflect.TypeOf((*MockStudentServiceI)(nil).UpdateStudent), studentID, name, rollnumber, classID, semester)
}
